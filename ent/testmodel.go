// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"test/ent/testmodel"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// TestModel is the model entity for the TestModel schema.
type TestModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Test holds the value of the "test" field.
	Test string `json:"test,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestModel) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // test
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestModel fields.
func (tm *TestModel) assignValues(values ...interface{}) error {
	if m, n := len(values), len(testmodel.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		tm.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		tm.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		tm.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field test", values[2])
	} else if value.Valid {
		tm.Test = value.String
	}
	return nil
}

// Update returns a builder for updating this TestModel.
// Note that, you need to call TestModel.Unwrap() before calling this method, if this TestModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TestModel) Update() *TestModelUpdateOne {
	return (&TestModelClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (tm *TestModel) Unwrap() *TestModel {
	tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestModel is not a transactional entity")
	}
	tm.config.driver = tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TestModel) String() string {
	var builder strings.Builder
	builder.WriteString("TestModel(")
	builder.WriteString(fmt.Sprintf("id=%v", tm.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(tm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(tm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", test=")
	builder.WriteString(tm.Test)
	builder.WriteByte(')')
	return builder.String()
}

// TestModels is a parsable slice of TestModel.
type TestModels []*TestModel

func (tm TestModels) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
