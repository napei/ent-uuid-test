// Code generated by entc, DO NOT EDIT.

package testmodel

import (
	"test/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTest), v))
	})
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.TestModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTest), v...))
	})
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.TestModel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestModel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTest), v...))
	})
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTest), v))
	})
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTest), v))
	})
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTest), v))
	})
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTest), v))
	})
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTest), v))
	})
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTest), v))
	})
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTest), v))
	})
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTest), v))
	})
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTest), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.TestModel) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.TestModel) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestModel) predicate.TestModel {
	return predicate.TestModel(func(s *sql.Selector) {
		p(s.Not())
	})
}
