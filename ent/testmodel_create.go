// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"test/ent/testmodel"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// TestModelCreate is the builder for creating a TestModel entity.
type TestModelCreate struct {
	config
	mutation *TestModelMutation
	hooks    []Hook
}

// SetTest sets the test field.
func (tmc *TestModelCreate) SetTest(s string) *TestModelCreate {
	tmc.mutation.SetTest(s)
	return tmc
}

// SetID sets the id field.
func (tmc *TestModelCreate) SetID(u uuid.UUID) *TestModelCreate {
	tmc.mutation.SetID(u)
	return tmc
}

// Mutation returns the TestModelMutation object of the builder.
func (tmc *TestModelCreate) Mutation() *TestModelMutation {
	return tmc.mutation
}

// Save creates the TestModel in the database.
func (tmc *TestModelCreate) Save(ctx context.Context) (*TestModel, error) {
	if err := tmc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *TestModel
	)
	if len(tmc.hooks) == 0 {
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmc.mutation = mutation
			node, err = tmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			mut = tmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TestModelCreate) SaveX(ctx context.Context) *TestModel {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tmc *TestModelCreate) preSave() error {
	if _, ok := tmc.mutation.Test(); !ok {
		return &ValidationError{Name: "test", err: errors.New("ent: missing required field \"test\"")}
	}
	if _, ok := tmc.mutation.ID(); !ok {
		v := testmodel.DefaultID()
		tmc.mutation.SetID(v)
	}
	return nil
}

func (tmc *TestModelCreate) sqlSave(ctx context.Context) (*TestModel, error) {
	tm, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tm, nil
}

func (tmc *TestModelCreate) createSpec() (*TestModel, *sqlgraph.CreateSpec) {
	var (
		tm    = &TestModel{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testmodel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testmodel.FieldID,
			},
		}
	)
	if id, ok := tmc.mutation.ID(); ok {
		tm.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tmc.mutation.Test(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testmodel.FieldTest,
		})
		tm.Test = value
	}
	return tm, _spec
}

// TestModelCreateBulk is the builder for creating a bulk of TestModel entities.
type TestModelCreateBulk struct {
	config
	builders []*TestModelCreate
}

// Save creates the TestModel entities in the database.
func (tmcb *TestModelCreateBulk) Save(ctx context.Context) ([]*TestModel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TestModel, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*TestModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (tmcb *TestModelCreateBulk) SaveX(ctx context.Context) []*TestModel {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
