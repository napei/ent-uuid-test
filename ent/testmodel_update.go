// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"test/ent/predicate"
	"test/ent/testmodel"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TestModelUpdate is the builder for updating TestModel entities.
type TestModelUpdate struct {
	config
	hooks      []Hook
	mutation   *TestModelMutation
	predicates []predicate.TestModel
}

// Where adds a new predicate for the builder.
func (tmu *TestModelUpdate) Where(ps ...predicate.TestModel) *TestModelUpdate {
	tmu.predicates = append(tmu.predicates, ps...)
	return tmu
}

// SetTest sets the test field.
func (tmu *TestModelUpdate) SetTest(s string) *TestModelUpdate {
	tmu.mutation.SetTest(s)
	return tmu
}

// Mutation returns the TestModelMutation object of the builder.
func (tmu *TestModelUpdate) Mutation() *TestModelMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tmu *TestModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tmu.hooks) == 0 {
		affected, err = tmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmu.mutation = mutation
			affected, err = tmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmu.hooks) - 1; i >= 0; i-- {
			mut = tmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TestModelUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TestModelUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TestModelUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmu *TestModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testmodel.Table,
			Columns: testmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testmodel.FieldID,
			},
		},
	}
	if ps := tmu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testmodel.FieldTest,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TestModelUpdateOne is the builder for updating a single TestModel entity.
type TestModelUpdateOne struct {
	config
	hooks    []Hook
	mutation *TestModelMutation
}

// SetTest sets the test field.
func (tmuo *TestModelUpdateOne) SetTest(s string) *TestModelUpdateOne {
	tmuo.mutation.SetTest(s)
	return tmuo
}

// Mutation returns the TestModelMutation object of the builder.
func (tmuo *TestModelUpdateOne) Mutation() *TestModelMutation {
	return tmuo.mutation
}

// Save executes the query and returns the updated entity.
func (tmuo *TestModelUpdateOne) Save(ctx context.Context) (*TestModel, error) {
	var (
		err  error
		node *TestModel
	)
	if len(tmuo.hooks) == 0 {
		node, err = tmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tmuo.mutation = mutation
			node, err = tmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmuo.hooks) - 1; i >= 0; i-- {
			mut = tmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TestModelUpdateOne) SaveX(ctx context.Context) *TestModel {
	tm, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tm
}

// Exec executes the query on the entity.
func (tmuo *TestModelUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TestModelUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmuo *TestModelUpdateOne) sqlSave(ctx context.Context) (tm *TestModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testmodel.Table,
			Columns: testmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testmodel.FieldID,
			},
		},
	}
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TestModel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tmuo.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testmodel.FieldTest,
		})
	}
	tm = &TestModel{config: tmuo.config}
	_spec.Assign = tm.assignValues
	_spec.ScanValues = tm.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tm, nil
}
